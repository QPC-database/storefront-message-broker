<?php
# Generated by the Magento PHP proto generator.  DO NOT EDIT!

/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

declare(strict_types=1);

namespace Magento\ReviewsStorefrontApi\Api;

use \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataRequestInterface;
use \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataResponseInterface;
use \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataRequestInterface;
use \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataResponseInterface;
use \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataRequestInterface;
use \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataResponseInterface;
use \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataRequest;
use \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataResponse;
use \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataRequest;
use \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataResponse;
use \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataRequest;
use \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataResponse;
use \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataClient;

/**
 * Autogenerated description for RatingsMetadata class
 *
 * @SuppressWarnings(PHPMD)
 */
class RatingsMetadata implements RatingsMetadataInterface
{
    /**
     * @var RatingsMetadataClient
     */
    private $protoClient;

    /**
     * @param string $hostname
     * @param array $options
     * @param string|null $channel
     */
    public function __construct(
        string $hostname,
        array $options,
        ?string $channel = null
    ) {
        $this->protoClient = new RatingsMetadataClient($hostname, $options, $channel);
    }

    /**
     * @inheritdoc
     *
     * @param ImportRatingsMetadataRequestInterface $request
     * @return ImportRatingsMetadataResponseInterface
     * @throws \Throwable
     */
    public function importRatingsMetadata(ImportRatingsMetadataRequestInterface $request): ImportRatingsMetadataResponseInterface
    {
        $protoRequest = $this->importRatingsMetadataToProto($request);
        [$protoResult, $status] = $this->protoClient->importRatingsMetadata($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->importRatingsMetadataFromProto($protoResult);
    }

    /**
     * Autogenerated description for importRatingsMetadata method
     *
     * @param ImportRatingsMetadataRequestInterface $value
     * @return ImportRatingsMetadataRequest
     */
    private function importRatingsMetadataToProto(ImportRatingsMetadataRequestInterface $value): ImportRatingsMetadataRequest
    {
        // convert data from \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataRequest
        // to \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataRequest
        /** @var \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataRequest();
            $res = [];
            foreach ($value->getMetadata() as $item1) {
                // convert data from \Magento\ReviewsStorefrontApi\Api\Data\RatingMetadata
                // to \Magento\ReviewsStorefrontApi\Proto\RatingMetadata
                /** @var \Magento\ReviewsStorefrontApi\Api\Data\RatingMetadata $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\ReviewsStorefrontApi\Proto\RatingMetadata();
                    $r->setId($item1->getId());
                    $r->setName($item1->getName());
                    $res = [];
                    foreach ($item1->getValues() as $item4) {
                        // convert data from \Magento\ReviewsStorefrontApi\Api\Data\RatingValue
                        // to \Magento\ReviewsStorefrontApi\Proto\RatingValue
                        /** @var \Magento\ReviewsStorefrontApi\Api\Data\RatingValue $item4 **/
                        $p = function () use ($item4) {
                            $r = new \Magento\ReviewsStorefrontApi\Proto\RatingValue();
                            $r->setValueId($item4->getValueId());
                            $r->setValue($item4->getValue());
                            $r->setPosition($item4->getPosition());
                            return $r;
                        };
                        $proto = $p();
                        $res[] = $proto;
                    }
                    $r->setValues($res);
                    return $r;
                };
                $proto = $p();
                $res[] = $proto;
            }
            $r->setMetadata($res);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for importRatingsMetadata method
     *
     * @param ImportRatingsMetadataResponse $value
     * @return ImportRatingsMetadataResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function importRatingsMetadataFromProto(ImportRatingsMetadataResponse $value): ImportRatingsMetadataResponseInterface
    {
        // convert data from \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataResponse
        // to \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataResponse
        /** @var \Magento\ReviewsStorefrontApi\Proto\ImportRatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Api\Data\ImportRatingsMetadataResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param DeleteRatingsMetadataRequestInterface $request
     * @return DeleteRatingsMetadataResponseInterface
     * @throws \Throwable
     */
    public function deleteRatingsMetadata(DeleteRatingsMetadataRequestInterface $request): DeleteRatingsMetadataResponseInterface
    {
        $protoRequest = $this->deleteRatingsMetadataToProto($request);
        [$protoResult, $status] = $this->protoClient->deleteRatingsMetadata($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->deleteRatingsMetadataFromProto($protoResult);
    }

    /**
     * Autogenerated description for deleteRatingsMetadata method
     *
     * @param DeleteRatingsMetadataRequestInterface $value
     * @return DeleteRatingsMetadataRequest
     */
    private function deleteRatingsMetadataToProto(DeleteRatingsMetadataRequestInterface $value): DeleteRatingsMetadataRequest
    {
        // convert data from \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataRequest
        // to \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataRequest
        /** @var \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataRequest();
            $values = [];
            foreach ($value->getRatingIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setRatingIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for deleteRatingsMetadata method
     *
     * @param DeleteRatingsMetadataResponse $value
     * @return DeleteRatingsMetadataResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function deleteRatingsMetadataFromProto(DeleteRatingsMetadataResponse $value): DeleteRatingsMetadataResponseInterface
    {
        // convert data from \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataResponse
        // to \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataResponse
        /** @var \Magento\ReviewsStorefrontApi\Proto\DeleteRatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Api\Data\DeleteRatingsMetadataResponse();
            $r->setStatus($value->getStatus());
            $r->setMessage($value->getMessage());
            return $r;
        };
        $out = $p();

        return $out;
    }

    /**
     * @inheritdoc
     *
     * @param RatingsMetadataRequestInterface $request
     * @return RatingsMetadataResponseInterface
     * @throws \Throwable
     */
    public function getRatingsMetadata(RatingsMetadataRequestInterface $request): RatingsMetadataResponseInterface
    {
        $protoRequest = $this->getRatingsMetadataToProto($request);
        [$protoResult, $status] = $this->protoClient->getRatingsMetadata($protoRequest)->wait();
        if ($status->code !== 0) {
            throw new \RuntimeException($status->details, $status->code);
        }
        return $this->getRatingsMetadataFromProto($protoResult);
    }

    /**
     * Autogenerated description for getRatingsMetadata method
     *
     * @param RatingsMetadataRequestInterface $value
     * @return RatingsMetadataRequest
     */
    private function getRatingsMetadataToProto(RatingsMetadataRequestInterface $value): RatingsMetadataRequest
    {
        // convert data from \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataRequest
        // to \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataRequest
        /** @var \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataRequest $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataRequest();
            $values = [];
            foreach ($value->getRatingIds() as $newValue) {
                $values[] = $newValue;
            }
            $r->setRatingIds($values);
            $r->setStore($value->getStore());
            return $r;
        };
        $proto = $p();

        return $proto;
    }

    /**
     * Autogenerated description for getRatingsMetadata method
     *
     * @param RatingsMetadataResponse $value
     * @return RatingsMetadataResponseInterface
     * phpcs:disable Generic.Metrics.NestingLevel.TooHigh
     */
    private function getRatingsMetadataFromProto(RatingsMetadataResponse $value): RatingsMetadataResponseInterface
    {
        // convert data from \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataResponse
        // to \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataResponse
        /** @var \Magento\ReviewsStorefrontApi\Proto\RatingsMetadataResponse $value **/
        $p = function () use ($value) {
            $r = new \Magento\ReviewsStorefrontApi\Api\Data\RatingsMetadataResponse();
            $res = [];
            foreach ($value->getItems() as $item1) {
                // convert data from \Magento\ReviewsStorefrontApi\Proto\RatingMetadata
                // to \Magento\ReviewsStorefrontApi\Api\Data\RatingMetadata
                /** @var \Magento\ReviewsStorefrontApi\Proto\RatingMetadata $item1 **/
                $p = function () use ($item1) {
                    $r = new \Magento\ReviewsStorefrontApi\Api\Data\RatingMetadata();
                    $r->setId($item1->getId());
                    $r->setName($item1->getName());
                    $res = [];
                    foreach ($item1->getValues() as $item4) {
                        // convert data from \Magento\ReviewsStorefrontApi\Proto\RatingValue
                        // to \Magento\ReviewsStorefrontApi\Api\Data\RatingValue
                        /** @var \Magento\ReviewsStorefrontApi\Proto\RatingValue $item4 **/
                        $p = function () use ($item4) {
                            $r = new \Magento\ReviewsStorefrontApi\Api\Data\RatingValue();
                            $r->setValueId($item4->getValueId());
                            $r->setValue($item4->getValue());
                            $r->setPosition($item4->getPosition());
                            return $r;
                        };
                        $out = $p();
                        $res[] = $out;
                    }
                    $r->setValues($res);
                    return $r;
                };
                $out = $p();
                $res[] = $out;
            }
            $r->setItems($res);
            return $r;
        };
        $out = $p();

        return $out;
    }
}
